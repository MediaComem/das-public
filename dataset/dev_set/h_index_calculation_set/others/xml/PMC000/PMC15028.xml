<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Genome Biol</journal-id><journal-title>Genome Biology</journal-title><issn pub-type="ppub">1465-6906</issn><issn pub-type="epub">1465-6914</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">11178259</article-id><article-id pub-id-type="pmc">PMC15028</article-id><article-id pub-id-type="publisher-id">gb-2000-1-5-research0010</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research</subject></subj-group></article-categories><title-group><article-title>Accessing and distributing EMBL data using CORBA (common object request broker architecture)</article-title></title-group><contrib-group><contrib id="A1" contrib-type="author"><name><surname>Wang</surname><given-names>Lichun</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A2" contrib-type="author"><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>Patricia</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A3" contrib-type="author"><name><surname>Redaschi</surname><given-names>Nicole</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A4" contrib-type="author"><name><surname>McNeil</surname><given-names>Phil</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A5" contrib-type="author"><name><surname>Robinson</surname><given-names>Alan</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A6" contrib-type="author"><name><surname>Lijnzaad</surname><given-names>Philip</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib></contrib-group><aff id="I1"><label>1</label>EMBL Outstation - Hinxton, European Bioinformatics Institute, Wellcome Trust Genome Campus, Hinxton, Cambridge CB10 1SD, UK. E-mail: lcwang@ebi.ac.uk</aff><pub-date pub-type="ppub"><year>2000</year></pub-date><pub-date pub-type="epub"><day>6</day><month>11</month><year>2000</year></pub-date><volume>1</volume><issue>5</issue><fpage>research0010.1</fpage><lpage>research0010.10</lpage><ext-link ext-link-type="uri" xlink:href="http://genomebiology.com/2000/1/5/research/0010"/><history><date date-type="received"><day>26</day><month>7</month><year>2000</year></date><date date-type="rev-recd"><day>6</day><month>9</month><year>2000</year></date><date date-type="accepted"><day>21</day><month>9</month><year>2000</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2000 GenomeBiology.com</copyright-statement><copyright-year>2000</copyright-year><copyright-holder>GenomeBiology.com</copyright-holder></permissions><abstract><sec><title>Background:</title><p>The EMBL Nucleotide Sequence Database is a comprehensive database of DNA and RNA sequences and related information traditionally made available in flat-file format. Queries through tools such as SRS (Sequence Retrieval System) also return data in flat-file format. Flat files have a number of shortcomings, however, and the resources therefore currently lack a flexible environment to meet individual researchers' needs. The Object Management Group's common object request broker architecture (CORBA) is an industry standard that provides platform-independent programming interfaces and models for portable distributed object-oriented computing applications. Its independence from programming languages, computing platforms and network protocols makes it attractive for developing new applications for querying and distributing biological data.</p></sec><sec><title>Results:</title><p>A CORBA infrastructure developed by EMBL-EBI provides an efficient means of accessing and distributing EMBL data. The EMBL object model is defined such that it provides a basis for specifying interfaces in interface definition language (IDL) and thus for developing the CORBA servers. The mapping from the object model to the relational schema in the underlying Oracle database uses the facilities provided by Persistence<sup>TM</sup>, an object/relational tool. The techniques of developing loaders and 'live object caching' with persistent objects achieve a smart live object cache where objects are created on demand. The objects are managed by an evictor pattern mechanism.</p></sec><sec><title>Conclusions:</title><p>The CORBA interfaces to the EMBL database address some of the problems of traditional flat-file formats and provide an efficient means for accessing and distributing EMBL data. CORBA also provides a flexible environment for users to develop their applications by building clients to our CORBA servers, which can be integrated into existing systems.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>The EMBL (European Molecular Biology Laboratory) Nucleotide Sequence Database (often referred to as the EMBL database) [<xref ref-type="bibr" rid="B1">1</xref>] is hosted at the European Bioinformatics Institute (EBI). It is a comprehensive database of DNA and RNA sequences that are directly submitted from researchers and genome sequencing groups, and collected from the scientific literature and patent applications. It is produced in an international collaboration with GenBank (NCBI, Bethesda, USA) and DDBJ (the DNA Data Bank of Japan, CIB, Mishima, Japan). Each of the three collaborating groups collects a portion of the total sequence data reported worldwide, and all new and updated database entries are exchanged daily. The amount of sequence data is growing exponentially.</p><p>As our scientific understanding deepens, the complexity of the related information increases as well. As a result, the structure of the data also keeps changing. The EMBL database is managed and maintained using the relational database management system (DBMS) Oracle. It contains over 130 tables and 140 relationships, having around 80 Gigabytes (Gb) of data comprising nearly 10 million objects of primary data and millions of sub-objects called 'features'. Traditionally, the sequences and related information, which have been collected over a long period of time, are made available in flat-file format via ftp, CD-ROM, www tools, and so on. The queries through tools such as SRS (Sequence Retrieval System, a network browser for databanks in molecular biology) [<xref ref-type="bibr" rid="B2">2</xref>] also return data in flat-file format. However, flat files have a number of shortcomings: the format may not be described formally; it is difficult to represent complex data and relationships, the meaningful units of information ('objects') are not represented or handled well; it is hard to retrieve objects separately; assembly of objects into bigger aggregates is difficult; elaborate parsing is often required; and so on. In general, the current availability of the resources is not matched by a flexible environment to meet individual researchers' needs.</p><p>An industry standard, the Object Management Group's (OMG) common object request broker architecture (CORBA), provides platform-independent programming interfaces and models for portable distributed object-oriented computing applications [<xref ref-type="bibr" rid="B3">3</xref>,<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B5">5</xref>,<xref ref-type="bibr" rid="B6">6</xref>]. Its independence from programming languages, computing platforms and network protocols provides a solution for developing new applications for querying and distributing biological data [<xref ref-type="bibr" rid="B7">7</xref>,<xref ref-type="bibr" rid="B8">8</xref>,<xref ref-type="bibr" rid="B9">9</xref>,<xref ref-type="bibr" rid="B10">10</xref>,<xref ref-type="bibr" rid="B11">11</xref>,<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>], which can also be integrated into existing systems. Here we present a CORBA infrastructure developed at EMBL-EBI and show that the CORBA interfaces to the EMBL database address some of the limitations of the flat-file format and provide an efficient means for accessing and distributing EMBL data. CORBA also provides a flexible environment for users to develop application programs (for example, for sequence analysis or data mining).</p></sec><sec><title>Results and discussion</title><sec><title>EMBL object data model</title><p>The diversity and structure of biological data complicate their use. To develop a CORBA server that provides access to our biological data, we need a well-defined object model to model the real-world biological entities, that is, to describe the structure and constraints present in the data, as well as how the data can be accessed and queried. It is a specification of the data in the problem domain, independent of how the actual database is implemented. This model can then be expressed in IDL (interface definition language) interfaces to the CORBA server at one end, and mapped to a database schema for the underlying data management and storage at the other end.</p><p>We use the unified modeling language (UML) notation [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>] for this model. According to the UML, a model is organized into packages. A package groups classes that are semantically related and a dependency indicates that a package uses classes from another package. Each class belongs to exactly one package. A class is a descriptor for a set of objects that have similar properties, behavior and relationships to other objects. An attribute is a named property of a class. An attribute can be derived, that is, its value is computed from the values of other attributes. An operation is a procedure attached to a class, describing the behavior of the class. A class can be created by inheriting all attributes and operations from one or more of its superclasses. An association is a description of links or a set of links that specify connections among objects. An association can be reflexive, connecting a class with itself. Multiplicity defines how many times one object may link to another through an association. An association class has both association and class properties. It can be seen as an association that also has class properties, or as a class that also has association properties. It holds data that are relevant for the association, but for neither of the associated classes alone. A structured (composite) data type is represented as a class (as usual in object-oriented (OO) modeling). A class is used as an attribute type mainly if its role is solely to bundle simple data into a composite type (for example, Date). Multi-valued attributes are represented by instances of a parameterized class Coll{Type} (for example, Coll{string}).</p><p>Our object model of the EMBL database is organised into five main packages, as shown in Figure <xref ref-type="fig" rid="F1">1</xref>, where each package holds a set of closely related classes with a common purpose. The packages are: Sequence Info, classes representing biological sequences, general information about these sequences and administrative data associated with database entries; Feature Info, classes representing detailed sequence annotation (known as sequence features); Reference Info, classes representing bibliographic references that hold information about the sequences; Taxonomy Info, classes representing the taxonomy of the organisms from which the sequences were obtained; Location Info, classes representing locations on sequences.</p><fig position="float" id="F1"><label>Figure 1</label><caption><p>The database partitioning. The database is divided into five main packages: <italic>Sequence Info</italic>, all general information about sequences; <italic>Feature Info</italic>, detailed sequence annotation; <italic>Reference Info</italic>, bibliographic references; <italic>Taxonomy Info</italic>, the taxonomy of the organisms from which the sequences were obtained; <italic>Location Info</italic>, representing locations on sequences.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-1"/></fig><p>There is one additional package, Types, which holds classes representing all the special data types used in various parts of the model. Each package contains a relatively isolated part of the entire object model, and is a clear candidate for re-use in models for other databases.</p><p>Figure <xref ref-type="fig" rid="F2">2</xref> gives the definition of Sequence Info only. A full definition of the EMBL Nucleotide Sequence Database object model [<xref ref-type="bibr" rid="B16">16</xref>] can be found in <xref ref-type="supplementary-material" rid="S1">Additional data file 1</xref> with the online version of this article. The package Sequence Info defines class BioSeq, which represents biological sequences, and class Seqlnfo, which describes general information about these sequences. The administrative data associated with database entries are defined in Entrylnfo. The biological classes of sequence NSDBSeq, for nucleotide sequences, and PIDSeq, for protein sequences, are subclasses of BioSeq. VirtualSeq and PhysicalSeq are storage classes of sequence, that is, virtual or literal.</p><fig position="float" id="F2"><label>Figure 2</label><caption><p>Sequence Info. This package defines class <italic>BioSeq</italic>, which represents biological sequences, and class <italic>SeqInfo</italic>, which describes general information about these sequences. The administrative data associated with database entries are defined in <italic>EntryInfo</italic>. The biological classes of sequence <italic>NSDBSeq</italic>, which is for nucleotide sequences, and <italic>PIDSeq</italic>, which is for protein sequences, are subclasses of <italic>BioSeq</italic>. <italic>VirtualSeq</italic> and <italic>PhysicalSeq</italic> are storage classes of sequence, that is, virtual or literal.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-2"/></fig><p>The definition of some biological entities is prone to change because of the rapid developments in molecular biology. Any change made to the structure of the model needs to be propagated to both the IDL specification that defines the CORBA server interfaces and underlying relational schema. To handle this problem, a strategy of using both explicit model and meta model is employed in defining Feature Info. The structure of the model is therefore not affected by changes to the feature definition, which makes it suitable for defining stable IDL interfaces.</p><p>The EMBL CORBA server mainly covers Sequence Info, Location Info and Feature Info, which are grouped into a big package that also includes Reference Info and Taxonomy Info. The reference and taxonomy servers are independent servers for Reference Info and Taxonomy Info. This paper is focused on the EMBL server.</p></sec><sec><title>System architecture and CORBA development</title><p>The system architecture is shown in Figure <xref ref-type="fig" rid="F3">3</xref>. On the server side, CORBA implementation objects access and query the relational database via Persistence<sup>TM</sup> (Persistence Software) [<xref ref-type="bibr" rid="B17">17</xref>], which acts as a middleware between our CORBA implementation and the Oracle database. To allow invoking operations on the objects, the server provides its clients interfaces in OMG IDL, which is independent of the server implementation. An object's interface is composed of the operations and types of data that can be passed to and from those operations. Clients access the CORBA objects via operation calls through an object request broker (ORB), where the distribution details are handled by the ORB.</p><fig position="float" id="F3"><label>Figure 3</label><caption><p>System architecture. On the server side, CORBA implementation objects access and query the relational database via Persistence<sup>TM</sup>, which is a middleware between our CORBA implementation and the Oracle database. To allow invoking operations on the objects, the server provides its clients interfaces in OMG IDL, which is independent of the server implementation. An object's interface is composed of the operations and types of data that can be passed to and from those operations. Clients access the CORBA objects via operation calls through an Object Request Broker (ORB) where the distribution details are handled by the ORB.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-3"/></fig><p>The CORBA development overview is shown in Figure <xref ref-type="fig" rid="F4">4</xref>. CORBA object interfaces together with their operations and type of data are defined in IDL. For the ORB, we have chosen IONA Inc's C++ ORB, Orbix<sup>TM</sup> [<xref ref-type="bibr" rid="B18">18</xref>]. Its IDL compiler generates skeleton code and stub code in C++. We provide the server object implementation code and the Persistence application code. These codes are subsequently compiled and linked together to become executable. Clients can be written in any language for which an ORB and IDL compiler are available, including Ada, C, C++, COBOL, CommonLisp, Eiffel, Java, Python, Peri, SmallTalk, Tcl, and so on. Note that we do not use the new features in CORBA 2.3, as ORBs that implement CORBA 2.3 have only become available recently.</p><fig position="float" id="F4"><label>Figure 4</label><caption><p>CORBA development overview. CORBA object interfaces together with their operations and type of data are defined in IDL. For the ORB, we have chosen IONA Inc's C++ ORB, Orbix<sup>TM</sup>. Its IDL compiler generates skeleton code and stub code in C++. We provide the server object implementation code and the Persistence application code. These codes are subsequently compiled and linked together to become executable. Clients can be written in any language for which an ORB and IDL compiler are available, including Ada, C, C++, COBOL, CommonLisp, Eiffel, Java, Python, Perl, SmallTalk, Tcl, and so on.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-4"/></fig><sec><title>IDL definition</title><p>The OMG IDL is CORBA's fundamental abstraction mechanism for separating object interfaces from their implementations [<xref ref-type="bibr" rid="B3">3</xref>,<xref ref-type="bibr" rid="B4">4</xref>]. It allows object interfaces to be defined in a manner that is independent of any particular programming language. It establishes a contract between client and server that describes the types and object interfaces used by an application. IDL definitions focus on object interfaces, the operations supported by those interfaces, and exceptions that might be raised by the operations. As data can only be exchanged between client and server if their types are defined in IDL, typically a large part of an IDL is concerned with the definition of data types. An interface can inherit from one or more other interfaces.</p><p>Following the EMBL data model, the IDL definition for the EMBL server comprises three IDL files: nsdb.idl, seqdb.idl and types.idl. The nsdb.idl defines the EMBL-specific sequences and related information and includes seven interfaces in the module nsdb: Entrylnfo, Embl, EmblSeq, NucSeq, NucFeature, Location and FeatureLocation. The seqdb.idl defines the module seqdb that includes three interfaces: BioSeq, Seqlnfo and Feature, which contain more general biological sequence information. The nsdb.idl and seqdb.idl use basic types defined in types.idl.</p><p>To reflect the accessing and querying of data, operations are defined in such a way that the return values of the operations represent attributes in the EMBL object data model. This supports 'creating objects on demand'. These objects are instances of 'data classes', which are the results of queries. Figure <xref ref-type="fig" rid="F5">5</xref> gives the IDL specification of interfaces BioSeq and Seqlnfo in module seqdb, and Entrylnfo, NucSeq and EmblSeq in module nsdb (the full IDL definition can be found in the Additional data file with the online version of this article) [<xref ref-type="bibr" rid="B19">19</xref>]). NucSeq inherits from seqdb::BioSeq and EmblSeq inherits from NucSeq, seqdb::SeqInfo, and Entrylnfo.</p><fig position="float" id="F5"><label>Figure 5</label><caption><p>Part of module <italic>seqdb</italic> and <italic>nsdb</italic>, extracted from the EMBL IDL specification. The interfaces <italic>BioSeq</italic> and <italic>SeqInfo</italic> are defined in module <italic>seqdb</italic>; The interfaces <italic>EntryInfo, NucSeq</italic> and <italic>EmblSeq</italic> are defined in module <italic>nsdb. NucSeq</italic> inherits from <italic>seqdb::BioSeq</italic> and <italic>EmblSeq</italic> inherits from <italic>NucSeq, seqdb::SeqInfo,</italic> and <italic>EntryInfo.</italic></p></caption><graphic xlink:href="gb-2000-1-5-research0010-5"/></fig></sec><sec><title>Class relationships</title><p>Each IDL interface is mapped into a class in C++ by the orb's IDL compiler (in our case, the ORB is iona's Orbix), and operations are mapped to member functions of the class. For the above interfaces BioSeq and Seqlnfo, we have two mapped classes as shown in Figure <xref ref-type="fig" rid="F6">6</xref>.</p><fig position="float" id="F6"><label>Figure 6</label><caption><p>Classes of <italic>BioSeq</italic> and <italic>SeqInfo</italic>. The class BioSeq has four methods: getBioSeqId, getLength, getAnySeq and getBioSeqVersion. The returned values of methods represent attributes of class BioSeq defined in the object model, providing information on biological sequences. The class SeqInfo has methods: getDescription, getKeywords, getComments, getDbXrefs and getReferences, representing general information on the sequences.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-6"/></fig><p>The module itself is also mapped into a class here. Although it can normally be mapped to a namespace, our C++ compiler (Sun's SparcWorks 4.2) does not support namespaces. The relationship between classes is shown in Figure <xref ref-type="fig" rid="F7">7</xref> in UML notation. The seqdb consists of three classes: Seqlnfo, BioSeq, and Feature. The nsdb class comprises four classes: EmblSeq, NucFeature, FeatureLocation and Embl. EmblSeq inherits from the classes of Entrylnfo, Seqlnfo and NucSeq that in turn inherits from BioSeq. FeatureLocation inherits from Location, and NucFeature inherits from Feature.</p><fig position="float" id="F7"><label>Figure 7</label><caption><p>Class relationship in UML notation. The class <italic>seqdb</italic> consists of 3 classes: <italic>SeqInfo</italic>, <italic>BioSeq</italic>, and <italic>Feature</italic>. The class <italic>nsdb</italic> comprises 4 classes: <italic>EmblSeq, NucFeature, FeatureLocation</italic> and <italic>Embl. EmblSeq</italic> inherits from the classes of <italic>EntryInfo, SeqInfo</italic> and <italic>NucSeq</italic> that in turn inherits from <italic>BioSeq. FeatureLocation</italic> inherits from <italic>Location</italic>, and <italic>NucFeature</italic> inherits from <italic>Feature</italic>.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-7"/></fig></sec><sec><title>Object-relational mapping</title><p>The EMBL CORBA server provides its clients with an object-oriented interface to the EMBL database. To achieve this, the object model needs to be mapped to the schema of the underlying Oracle relational database.</p><p>Persistence<sup>TM</sup>, an object/relational tool from Persistence Software [<xref ref-type="bibr" rid="B17">17</xref>], is a mediator for transforming object operations to relational database calls and vice versa. It maps objects to relational rows and manages the objects in a shared cache, called the live object cache. It uses a proprietary object model description that maps classes to tables, objects to rows, attributes to columns and associations to foreign keys.</p><p>For inheritance relationships (single inheritance only), Persistence insists on a so-called horizontal mapping for performance reasons; that is, in the class hierarchy, only leaf nodes are represented by real database tables (or views). Non-leaf class objects are obtained as projections of the leaf class tables. However, for maximum flexibility, our existing database schema, which is independent and developed prior to the CORBA development, uses the so-called vertical mapping. In this case, each node in the class hierarchy has its own table, with subclass tables having no superclass attributes; their primary keys are also foreign keys to the superclass table. As our objects provide read-only access, it is possible to set up relational views that transform our tables into the horizontal object-to-relational mapping that is required by Persistence. This allows developers to create hierarchies of related objects from 'flat' tables. For example, for the class NsdbSeq that is inherited from BioSeq, its so-called Persistence horizontal object-to-relational mapping (view) is shown in Figure <xref ref-type="fig" rid="F8">8</xref>. This view is built from a number of tables (or views) as shown in Figure <xref ref-type="fig" rid="F9">9</xref>. The CORBA class EmblSeq is mapped to the view of NsdbSeq.</p><fig position="float" id="F8"><label>Figure 8</label><caption><p>The NsdbSeq view in Persistence. As the class NsdnSeq inherits from the class BioSeq, the view of NsdbSeq in Persistence therefore has attributes defined in both NsdbSeq and BioSeq, representing information on nucleotide sequences.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-8"/></fig><fig position="float" id="F9"><label>Figure 9</label><caption><p>Tables for the NsdbSeq view in the actual database. The view is built from a number of tables (or views) of the database.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-9"/></fig><p>Using the data model and schema description, Persistence can also offer an automatic generation of an IDL specification as well as a complete CORBA server. We have not used this facility, however, as we want full control over the IDL specification. This approach has an advantage in using views even when a one-to-one mapping from IDL to EMBL tables remains. When the structure of data changes at the database side as a result of the increasing complexity of biological data or the availability of new modeling capability in the database, we need only a change on the underlying views. We much less frequently require a change on the Persistence mapping and code as these can still map the changed tables or data to the same objects at the CORBA side.</p></sec></sec><sec><title>Object management</title><p>A 'live object cache' is a notion used in Persistence [<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B20">20</xref>]. The basic model for managing live objects is to cache data instances read from the database, to register their primary key values, and to respond to queries based on the cached data. As tuples are retrieved from the database, they are converted to objects and 'knitted' together according to the object-model mapping to form a network of in-memory objects. A live object cache maps information from relational tables into objects. Accessing and manipulating these objects in the live object cache is faster than querying the relational database, speeding up application performance considerably. Persistence can also ensure data integrity with appropriate locking and transaction management.</p><p>There are roughly three types of objects involved here: persistent objects, live objects, and CORBA objects. Here a persistent object is referred as a 'data object' in the database. A live object is an in-memory object in the live object cache. A CORBA object is a CORBA implementation object defined in IDL. Creation of a CORBA object is called instantiation. When a persistent object is loaded into memory, it becomes a live object. A CORBA object owns one or more live objects. Note that the orb's object adapter, no matter whether a basic object adapter (BOA) or portable object adapter (POA), only serves as the glue between CORBA objects and the ORB. It is an object that adapts the interface of one object to a different interface expected by a caller and allows the caller to invoke requests on an object without knowing the object's true interface. Although the future CORBA may include garbage collection, the management of objects is currently at the application developer's discretion. This section discusses the management of objects.</p><sec><title>Creation of live objects</title><p>Data kept in the database are only loaded into the cache on an as-needed basis. We employ Orbix's loader techniques [<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B21">21</xref>] together with Persistence's live object caching [<xref ref-type="bibr" rid="B17">17</xref>,<xref ref-type="bibr" rid="B20">20</xref>] to build our loaders to support the creation of objects in the live object cache. When an operation invocation arrives at the process, Orbix ORB searches for the target object in the process's object table. Loaders are called when an object reference enters an address space via a function findMe, and Persistence live objects are then loaded. If no live objects available in the live object cache respond to the call, Persistence will create a new live object via querying and accessing the relational database.</p></sec><sec><title>Eviction of CORBA objects</title><p>Objects are created at the clients' request. When the server has been running for some period of time, possibly weeks or months, it will have created a number of CORBA objects, which in turn contain a number of Persistence live objects, and will consume the memory space. Some of them will not be needed any more. The evictor pattern [<xref ref-type="bibr" rid="B3">3</xref>] describes a general strategy for limiting memory consumption. The basic idea is that we use an object manager to instantiate objects on demand. However, instead of blindly instantiating a new object every time, the object manager checks instantiated objects in the pool that it manages. If the called object is already in the pool, it can be used directly. If not, it will check if the number of objects has reached a specified limit. If so, the object manager will evict an older instantiated object and then instantiate a new one for the current request. Consequently, the older related Persistence live objects will also be deleted from the cache and new live objects will be loaded in if requested.</p><p>One more interesting issue of the evictor pattern is how to choose which object to evict. There are a number of possible strategies, such as least recently used (LRU), least frequently used (LFU), evicting the object with the highest memory consumption (HMC), or using a weighted function that chooses an object for evictor based on a combination of factors (WF). We use a simple LRU algorithm to implement the evictor and prove it is effective.</p></sec></sec><sec><title>Accessibility of the EMBL database</title><p>When the CORBA server is up and running, a client, which can be developed using any CORBA-compliant ORB on the user's preferred environment and language (for which the ORB is available) at any local or remote machine, can access EMBL data through these objects using an IOR (Interoperable Object Reference) or via a Naming Service. We have published our EMBL server IOR [<xref ref-type="bibr" rid="B22">22</xref>] and its naming as 'databases/EMBL/nsdb/Embl', which is registered with the Naming Service [<xref ref-type="bibr" rid="B23">23</xref>]. We have also provided a number of demonstration clients for the EMBL server [<xref ref-type="bibr" rid="B24">24</xref>].</p><p>The client submits its query with bio-seq-id to the Embl object, which is a factory object representing the whole database. It invokes the operation findMe provided by EmblSeq object, which in turn invokes the loader object. The EmblSeq reference is returned to the client. Once the client has the EmblSeq object reference, it can then invoke the methods provided by EmblSeq to get the sequence information defined in Seqlnfo. The object attributes are obtained through invoking the methods. Further queries can be made through the invocation to other methods. The access is shown in Figure <xref ref-type="fig" rid="F10">10</xref>.</p><fig position="float" id="F10"><label>Figure 10</label><caption><p>Access to the EMBL database via the CORBA server. The client submits its query with <italic>bio-seq-id</italic> to the <italic>Embl</italic> object, which is a factory object representing the whole database. It invokes the operation findMe provided by <italic>EmblSeq</italic> object, which in turn invokes the loader object. The <italic>EmblSeq</italic> reference is returned to the client. Once the client has the <italic>EmblSeq</italic> object reference, it can then invoke the methods provided by <italic>EmblSeq</italic> to get the sequence information defined in <italic>SeqInfo</italic>. The object attributes are obtained through invoking the methods. Further queries can be made through the invocation to other methods.</p></caption><graphic xlink:href="gb-2000-1-5-research0010-10"/></fig><p>From Figure <xref ref-type="fig" rid="F10">10</xref>, it can be seen that CORBA interfaces to the EMBL database provide: meaningful units of information: objects; encapsulated methods, for example getLength(); interoperation between objects; easy access and distribution of data; and easy to comply with the standard. It provides a basis for developing further biological research tools.</p><p>Accessibility to the EMBL database via the EMBL CORBA server can be as fine as any small attribute defined in the EMBL data model. The EMBL CORBA server can also provide a blob object that contains a number of objects. Currently the EMBL server is undergoing a trial with internal and external users. There are increasing numbers of users developing their applications using our CORBA server.</p></sec></sec><sec><title>Conclusions</title><p>This paper presents a CORBA infrastructure developed at EMBL-EBI. The EMBL object model provides a basis to develop the CORBA server. Employing Persistence<sup>TM</sup> maps the object model to the relational schema in the underlying Oracle database. To present Persistence with the right relations, views have been used to transform the vertically mapped tables to horizontal ones. Properly built loaders make use of the technique of 'live object caching' and enhance the performance. The evictor pattern is used for memory management. It has been demonstrated that the CORBA server addresses some problems of the flat-file format and provides a solution to accessing and distributing EMBL sequence data. It also provides a flexible and scalable environment for users to develop their applications by building clients.</p><p>The future work will include migrating the implementation of the EMBL server to comply with the emerging standard - OMG standard for biosequences. By OMG rules, the EBI, as a co-submitter on the Biomolecular Sequence Analysis (BSA) standard, is obliged to implement the standard. As the BSA standard proposal is not fully compatible with the EMBL IDL specification currently used, care will have to be taken to make this transition as easy as possible for existing clients.</p></sec><sec><title>Additional data</title><p>The following additional data are included with the online version of this article: <xref ref-type="supplementary-material" rid="S1">The EMBL Nucleotide Sequence Database object model</xref> and <xref ref-type="supplementary-material" rid="S2">The EMBL IDL specification</xref>.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="S1"><caption><title>EMBL Nucleotide Sequence Database object model</title></caption><media xlink:href="gb-2000-1-5-research0010-S1.html" mimetype="text" mime-subtype="html"><caption><p>EMBL Nucleotide Sequence Database object model</p></caption></media></supplementary-material><supplementary-material content-type="local-data" id="S2"><caption><title>The EMBL IDL specification</title><p>It contains the IDL belonging to the EMBL CORBA servers:</p><p>The home page of the CORBA work at EBI is <ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/"/>. For questions and suggestions, please feel free to contact corba@ebi.ac.uk.</p></caption><media xlink:href="gb-2000-1-5-research0010-S2.idl" mimetype="text" mime-subtype="plain"><caption><p>general types used throughout the EMBL CORBA project (save as types.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S3.idl" mimetype="text" mime-subtype="plain"><caption><p>general sequence interfaces (save as seqdb.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S4.idl" mimetype="text" mime-subtype="plain"><caption><p>sequence interfaces specialised for EMBL (needs seqdb.idl) (save as nsdb.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S5.idl" mimetype="text" mime-subtype="plain"><caption><p>genetic code used for translation of nucleotide sequences in EMBL (save as geneticcode.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S6.idl" mimetype="text" mime-subtype="plain"><caption><p>the IDL for the reference server: access to the bibliographic references of EMBL (save as publication.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S7.idl" mimetype="text" mime-subtype="plain"><caption><p>the IDL for the taxonomy server: access to the taxonomy information of EMBL (save as taxonomy.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S8.idl" mimetype="text" mime-subtype="plain"><caption><p>meta information of the EMBL servers (save as meta.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S9.idl" mimetype="text" mime-subtype="plain"><caption><p>a file with only '#include' statements for the above IDL files, for easy compilation (save as embl.idl)</p></caption></media><media xlink:href="gb-2000-1-5-research0010-S10.txt" mimetype="text" mime-subtype="plain"><caption><p>Makefile is provided; it can be used to compile the IDL using one of three commonly used ORBs, i.e., ORBacus, Visibroker or OrbixWeb (save as Makefile).
</p></caption></media></supplementary-material></sec></body><back><ref-list><ref id="B1"><citation citation-type="other"><article-title>The EMBL Nucleotide Sequence Database</article-title><ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/embl.html"/></citation></ref><ref id="B2"><citation citation-type="other"><article-title>Sequence Retrieval System</article-title><ext-link ext-link-type="uri" xlink:href="http://srs.ebi.ac.uk/"/></citation></ref><ref id="B3"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Henning</surname><given-names>M</given-names></name><name><surname>Vinoski</surname><given-names>S</given-names></name></person-group><article-title>Advanced CORBA Programming with C++.</article-title><source>Reading, MA: Addison Wesley;</source><year>1999</year></citation></ref><ref id="B4"><citation citation-type="other"><article-title>OMG, CORBA/IIOP 2.3.1 Specification, 99-10-07</article-title><ext-link ext-link-type="uri" xlink:href="http://www.omg.org/corba/cichpter.html"/></citation></ref><ref id="B5"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Siegel</surname><given-names>J</given-names></name></person-group><article-title>CORBA Fundamentals and Programming. </article-title><source>New York: John Wiley and Sons;</source><year>1996</year></citation></ref><ref id="B6"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Siegel</surname><given-names>J</given-names></name></person-group><article-title>Corba 3 Fundamentals and Programming (OMG) 2nd edn.</article-title><source>New York: John Wiley and Sons;</source><year>2000</year></citation></ref><ref id="B7"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Barillot</surname><given-names>E</given-names></name><name><surname>Vaysseix</surname><given-names>G</given-names></name><name><surname>Achard</surname><given-names>F</given-names></name><name><surname>Viara</surname><given-names>E</given-names></name><name><surname>Flores</surname><given-names>T</given-names></name><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>P</given-names></name></person-group><source>Solutions to the interoperation of biological databases Proceedings of the Human Genome Mapping Conference, Heidelberg;</source><year>1996</year></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Emmanuel</surname><given-names>B</given-names></name><name><surname>Leser</surname><given-names>U</given-names></name><name><surname>Lijnzaad</surname><given-names>P</given-names></name><name><surname>Cussat-Blanc</surname><given-names>C</given-names></name><name><surname>Jungfer</surname><given-names>K</given-names></name><name><surname>Guyon</surname><given-names>F</given-names></name><name><surname>Vaysseix</surname><given-names>G</given-names></name><name><surname>Helgesen</surname><given-names>C</given-names></name><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>P</given-names></name></person-group><article-title>A proposal for a standard CORBA interface for genome maps.</article-title><source>Bioinformatics</source><year>1999</year><volume>15</volume><fpage>157</fpage><lpage>169</lpage><pub-id pub-id-type="pmid">10089201</pub-id></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Jungfer</surname><given-names>K</given-names></name><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>P</given-names></name></person-group><article-title>Mapplet: a CORBA-based genome map viewer.</article-title><source>Bioinformatics</source><year>1998</year><volume>14</volume><fpage>734</fpage><lpage>738</lpage><pub-id pub-id-type="pmid">9789099</pub-id></citation></ref><ref id="B10"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Lijnzaad</surname><given-names>P</given-names></name><name><surname>Coppieter</surname><given-names>J</given-names></name><name><surname>Flores</surname><given-names>T</given-names></name><name><surname>Helgesen</surname><given-names>C</given-names></name><name><surname>Slidel</surname><given-names>T</given-names></name></person-group><article-title>CORBA and Molecular Biology.</article-title><source> Addendum to Proceedings of the 12th Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA97), Atlanta;</source><year>1997</year></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Parson</surname><given-names>JD</given-names></name><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>P</given-names></name></person-group><article-title>JESAM: CORBA software components to create and publish EST alignments and clusters.</article-title><source>Bioinformatics</source><year>2000</year><volume>16</volume><fpage>313</fpage><lpage>325</lpage><pub-id pub-id-type="pmid">10869029</pub-id></citation></ref><ref id="B12"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Robinson</surname><given-names>AJ</given-names></name></person-group><article-title>Future directions for providing public access to molecular biology databases and services.</article-title><source>Eur BioPharm Rev</source><year>1998</year><fpage>68</fpage><lpage>76</lpage></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Rodriguez-Tom&#x000e9;</surname><given-names>P</given-names></name><name><surname>Lijnzaad</surname><given-names>P</given-names></name></person-group><article-title>The Radiation Hybrid Database.</article-title><source>Nucleic Acids Res</source><year>1999</year><volume>27</volume><fpage>115</fpage><lpage>118</lpage><pub-id pub-id-type="pmid">9847154</pub-id></citation></ref><ref id="B14"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Fowler</surname><given-names>M</given-names></name><name><surname>Scott</surname><given-names>K</given-names></name><name><surname>Booch</surname><given-names>G</given-names></name></person-group><article-title>UML Distilled, Second Edition: A Brief Guide to the Standard Object Modeling Language.</article-title><source> New York: Addison Wesley;</source><year>1999</year></citation></ref><ref id="B15"><citation citation-type="other"><article-title>OMG, Unified Modelling Language Specification, UML V1.3, ad/99-06-09</article-title><ext-link ext-link-type="uri" xlink:href="http://www.omg.org/uml/"/></citation></ref><ref id="B16"><citation citation-type="other"><article-title>The EMBL Nucleotide Sequence Database Object Model</article-title><ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/models/emblom_doc.html"/></citation></ref><ref id="B17"><citation citation-type="other"><article-title>Persistence Software Inc</article-title><ext-link ext-link-type="uri" xlink:href="http://www.persistence.com"/></citation></ref><ref id="B18"><citation citation-type="other"><article-title>IONA Technologies PLC</article-title><ext-link ext-link-type="uri" xlink:href="http://www.iona.com/"/></citation></ref><ref id="B19"><citation citation-type="other"><article-title>The EMBL IDL specification</article-title><ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/EMBL_servers.html"/></citation></ref><ref id="B20"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Agarwal</surname><given-names>S</given-names></name><name><surname>Keller</surname><given-names>AM</given-names></name></person-group><article-title>Architecting Object Applications for High Performance with Relational Databases</article-title><source>San Mateo, CA: Persistence Software Inc;</source><year>1998</year></citation></ref><ref id="B21"><citation citation-type="other"><article-title>Orbix C++ Programmer's Guide. </article-title><source> Dublin, Ireland: IONA Technologies plc,;</source><year>1999</year></citation></ref><ref id="B22"><citation citation-type="other"><article-title>The EMBL CORBA server IOR</article-title><ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/IOR/Embl.IOR"/></citation></ref><ref id="B23"><citation citation-type="other"><article-title>The CORBA Naming Service IOR</article-title><ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/IOR/naming.ior"/></citation></ref><ref id="B24"><citation citation-type="other"><article-title>The EMBL CORBA Clients</article-title><ext-link ext-link-type="uri" xlink:href="http://corba.ebi.ac.uk/clients.html"/></citation></ref></ref-list></back></article>



